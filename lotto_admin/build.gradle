plugins {
  id 'java'
  id 'war'
  alias(libs.plugins.spring.boot.v3dot4)
  alias(libs.plugins.spring.dependency.management)
}

group = 'org.fp024.lotto'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of("${javaVersion}")
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs.add("-parameters")
  options.encoding = "${projectEncoding}"
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation enforcedPlatform(libs.spring.cloud.dependencies)
  implementation 'org.springframework.boot:spring-boot-starter-web'

  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
  runtimeOnly 'org.xerial:sqlite-jdbc'

  implementation ("com.querydsl:querydsl-jpa") {
    artifact {
      classifier = 'jakarta'
    }
  }
  annotationProcessor (
    'jakarta.persistence:jakarta.persistence-api', 
    'jakarta.annotation:jakarta.annotation-api'
  )
  annotationProcessor ("com.querydsl:querydsl-apt") {
    artifact {
      classifier = 'jakarta'
    }
  }

  implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'

  implementation 'org.webjars:webjars-locator-core'
  implementation (libs.webjars.bootstrap)
  implementation (libs.webjars.jquery)

  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Explicitly setting up instrumentation for inline mocking (Java 21+) 설정
// * https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
configurations {
  mockitoAgent
}

dependencies {
  mockitoAgent('org.mockito:mockito-core') {
    transitive = false
  }
}

tasks.named('test') {
  jvmArgs "-javaagent:${configurations.mockitoAgent.asPath}", "-Xshare:off"
  useJUnitPlatform()
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}

// ----------------------------------------------------------------------------
// vscode-java-test가 build.gradle의 test 설정을 인식하지 못하기 때문에,
// -javaagent 설정이 필요할 경우 라이브러리를 수동으로 복사하는 테스크를 만들었다.
// gradle cleanJavaAgentLibs를 실행해둔 후에, VSCode 상에서 테스트를 수행하자!
task copyMockitoJar(type: Copy) { 
  from configurations.mockitoAgent into "${project.rootDir}/javaagent-libs" 
}

// javaagent-libs 디렉토리를 비움
task cleanJavaAgentLibs(type: Delete) {
  delete fileTree(dir: "${project.rootDir}/javaagent-libs", include: '**/*.jar')
}

tasks.named('copyMockitoJar').configure {
  dependsOn cleanJavaAgentLibs
}

// 의존성 해결 후 Jar 파일을 복사
afterEvaluate {
  tasks.named('classes').configure {
    dependsOn copyMockitoJar
  }
}
// ----------------------------------------------------------------------------